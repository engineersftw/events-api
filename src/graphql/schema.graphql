scalar DateTime

type Event {
  uid: ID
  name: String
  description: String
  location: String
  rsvp_count: Int
  url: String
  group_id: String
  group_name: String
  group_url: String
  formatted_time: String
  start_time: DateTime
  end_time: DateTime
  platfrom: String
  platfrom_identifier: String
  latitude: Float
  longitude: Float
  active: Boolean
}

type Group {
  uid: ID
  name: String
  platform: String
  platform_identifier: String
  status: String
  link: String
  urlname: String
  description: String
  members: Int
  blacklisted: Boolean
  active: Boolean
}

type PageInfo {
  currentPage: Int!
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
}

type EventConnection {
  nodes: [Event]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type GroupConnection {
  nodes: [Group]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type Query {
  event(uid: ID!): Event
  events(pageNumber: Int!, perPage: Int, from: DateTime, to: DateTime): EventConnection
  group(uid: ID!): Group
  groups(pageNumber: Int!, perPage: Int): GroupConnection
}

input EventInput {
  name: String!
  description: String!
  location: String!
  url: String!
  group_name: String!
  group_url: String!
  start_time: DateTime!
  end_time: DateTime!
}

interface MutationResponse {
  code: String!
  success: Boolean!
  message: String!
}

type EventMutationResponse implements MutationResponse {
  code: String!
  success: Boolean!
  message: String!
  event: Event
}

type Mutation {
  createEvent(event: EventInput!): EventMutationResponse
}